* {
  border: #{$borderDefault};
}

// border classes
@mixin border($widthKey: 'default', $sideKey: 'default') {
  $sideValue: map-get($borderSides, $sideKey);
  $widthValue: map-get($borderWidths, $widthKey);
  @if $sideKey == 'default' {
    border-width: #{$widthValue};
  } @else {
    @if length($sideValue) > 1 {
      @each $value in $sideValue {
        border-#{$value}-width: #{$widthValue};
      }
    } @else {
      border-#{$sideValue}-width: #{$widthValue};
    }
  }
}

// .border{-side?}{-width?}
@each $widthKey, $widthValue in $borderWidths {
  @if $widthKey == 'default' {
    %border {
      @include border($widthKey);
    }
    @if $generateClasses {
      .border {
        @extend %border;
      }
    }
  } @else {
    %border-#{$widthKey} {
      @include border($widthKey);
    }
    @if $generateClasses {
      .border-#{$widthKey} {
        @extend %border-#{$widthKey};
      }
    }
  }
  @each $sideKey, $sideValue in $borderSides {
    @if $widthKey == 'default' {
      %border-#{$sideKey} {
        @include border($widthKey, $sideKey);
      }
      @if $generateClasses {
        .border-#{$sideKey} {
          @extend %border-#{$sideKey};
        }
      }
    } @else {
      %border-#{$sideKey}-#{$widthKey} {
        @include border($widthKey, $sideKey);
      }
      @if $generateClasses {
        .border-#{$sideKey}-#{$widthKey} {
          @extend %border-#{$sideKey}-#{$widthKey};
        }
      }
    }
  }
}


// ================================


// .border-{color}
@mixin borderColor($key, $variant: false) {
  $value: map-get($borderColors, $key);
  @include variant($variant) {
    border-color: #{$value};
  }
}
@each $key, $value in $borderColors {
  %border-#{$key} {
    @include borderColor($key);
  }
  @if $generateClasses {
    .border-#{$key} {
      @extend %border-#{$key};
    }
  }
}

// Class name .{variant}:border-{$color}
@each $variant in $borderColorVariants {
  @each $colorKey, $colorValue in $borderColors {
    %#{$variant}\:border-#{$colorKey} {
      @include borderColor($colorKey, $variant);
    }
    @if $generateClasses {
      .#{$variant}\:border-#{$colorKey} {
        @extend %#{$variant}\:border-#{$colorKey};
      }
    }
  }
}

// Responsive border color
// @media {screen}
// Class name .{screen}:border-{color}
@each $screenKey, $screenValue in $screens {
  @include media($screenKey) {
    @each $colorKey, $colorValue in $responsiveBorderColors {
      %#{$screenKey}\:border-#{$colorKey} {
        @include borderColor($colorKey);
      }
      @if $generateClasses {
        .#{$screenKey}\:border-#{$colorKey} {
          @extend %#{$screenKey}\:border-#{$colorKey};
        }
      }
    }
  }
}


// ================================

// .border-{style}
@mixin borderStyle($style) {
  border-style: #{$style};
}
@each $style in $borderStyles {
  %border-#{$style} {
    @include borderStyle($style);
  }
  .border-#{$style} {
    @extend %border-#{$style};
  }
}


// ================================

// Border radius
@mixin borderRadius($radiusKey: 'default', $sideKey: 'default') {
  $radiusValue: map-get($borderRadius, $radiusKey);
  $sideValue: map-get($borderRadiusSides, $sideKey);
  @if $sideKey == 'default' {
    border-radius: #{$radiusValue};
  } @else {
    @if length($sideValue) > 1 {
      @each $value in $sideValue {
        border-#{$value}-radius: #{$radiusValue};
      }
    } @else {
      border-#{$sideValue}-radius: #{$radiusValue};
    }
  }
}

// Border radius
// .rounded{-side?}{-radius?}
@each $radiusKey, $radiusValue in $borderRadius {
  @if $radiusKey == 'default' {
    %rounded {
      @include borderRadius($radiusKey);
    }
    @if $generateClasses {
      .rounded {
        @extend %rounded;
      }
    }
  } @else {
    %rounded-#{$radiusKey} {
      @include borderRadius($radiusKey);
    }
    @if $generateClasses {
      .rounded-#{$radiusKey} {
        @extend %rounded-#{$radiusKey};
      }
    }
  }
  @each $sideKey, $sideValue in $borderRadiusSides {
    @if $radiusKey == 'default' {
      %rounded-#{$sideKey} {
        @include borderRadius($radiusKey, $sideKey);
      }
      @if $generateClasses {
        .rounded-#{$sideKey} {
          @extend %rounded-#{$sideKey};
        }
      }
    } @else {
      %rounded-#{$sideKey}-#{$radiusKey} {
        @include borderRadius($radiusKey, $sideKey);
      }
      @if $generateClasses {
        .rounded-#{$sideKey}-#{$radiusKey} {
          @extend %rounded-#{$sideKey}-#{$radiusKey};
        }
      }
    }
  }
}
