// ========================================================
// Screen mixin
//
// Usage:
//   Wrapping class:
//   @include screen('sm') {
//     .myClass { … }
//   }
//
//   Wrapping values:
//   .myClass {
//     color: red;
//     @include screen('sm') {
//       color: blue;
//     }
//   }
//
// Customizing:
//   Use different media list:
//   $customList: ('max-md', '(max-width: 991px)');
//   @include ('max-md', $customList) { … }
//
// Generates: @media {value} { @content; }
//
// If you pass an invalid key (not in list) it will ignore it
// and print the @content without a @media query

@mixin screen($key, $list: $responsive) {
  @if map-has-key($list, $key) {
    @media #{map-get($list, $key)} {
      @content;
    }
  } @else { @content; }
}

// ========================================================
// Color function
@function color($key) {
  @return #{map-get($colors, $key)};
}

// ========================================================
// Make mixin
// TODO: Make mixin explanation

@mixin make($base, $properties, $values, $variants: ()) {
  $variants: join(('default'), $variants, 'comma');
  @if type-of($properties) == 'string' {
    $properties: ('default': $properties);
  }
  @each $variant in $variants {
    @each $vKey, $vValue in $variant {
      @include screen($vKey) {
        $classPrepend: if($variant == 'default', '', '#{$vKey}\\:');
        $classAppend: if($vValue or $vKey == 'default' or str-index($vKey, '.'), '', ':#{$vKey}');

        @each $pKey, $pValue in $properties {
          $pKey: if($pKey == 'default', '', '-#{$pKey}');
          @each $key, $value in $values {
            $key: if($key == 'default', '', if($base == '', '#{$key}', '-#{$key}'));

            .#{$classPrepend}#{$base}#{$pKey}#{$key}#{$classAppend} {
              @each $val in $pValue {
                #{$val}: #{$value};
              }
            }

          }
        }
      }
    }
  }
}
