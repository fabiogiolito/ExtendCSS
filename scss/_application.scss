// ========================================================
// Vendors
@import 'vendors/normalize';


// ========================================================
// Mixins and Functions
@import 'config/_functions';

// This is IMPORTANT
// Set this if you want to generate the utility classes
// If false you only get placeholders for extension, like %bg-blue
// If true you get classes, like .bg-blue, in addition to placeholders
$generateClasses: true;


// ========================================================
// Configure values

@import 'config/responsive';
@import 'config/variants';
@import 'config/colors';

@import 'config/resets';

@import 'config/backgrounds';
@import 'config/typography';
@import 'config/borders';
@import 'config/sizes';
@import 'config/spacing';
@import 'config/shadows';
@import 'config/display';
@import 'config/overflow';
@import 'config/position';
@import 'config/floats';

@import 'config/misc';


// ========================================================
// Classes to be created
//
// Format:
//  (
//   ( $class, $properties, $values, $variants ),
//   â€¦
// )
//
// $class: String with base class name. Eg: 'text' => .text{-$value?}
// $properties:
//   1. String:
//     CSS property being modified.
//     Eg: 'color' => { color: red; }
//   2. List:
//     Class modifier, CSS property.
//     Eg: ('t', 'border-top') => .border-t-0 { border-top: 0; }
//
// Customize:
//   You can comment out lines with classes you don't need
//   To change values or variations, check the config file for that class
//
// Used to generate classes:
//   .{variantPrepend:?}{class}{-property?}{-value?}{:variantAppend?}
//   See config/_functions.scss to understand the class structure
//   See config/variants.scss for more info on variants

$classes: (

  // config/backgrounds.scss
  ('bg', 'background-color', $backgroundColors, $backgroundColorVariants),
  ('bg', 'background-size', $backgroundSizes, $backgroundSizeVariants),
  ('bg', 'background-attachment', $backgroundAttachments, $backgroundAttachmentVariants),
  ('bg', 'background-position', $backgroundPositions, $backgroundPositionVariants),
  ('bg', 'background-repeat', $backgroundRepeats, $backgroundRepeatVariants),

  // config/typography.scss
  ('text', 'color', $textColors, $textColorVariants),
  ('font', 'font-family', $fonts, $fontFamilyVariants),
  ('text', 'font-size', $textSizes, $fontSizeVariants),
  ('font', 'font-weight', $fontWeights, $fontWeightVariants),
  ('leading', 'line-height', $leading, $leadingVariants),
  ('tracking', 'letter-spacing', $tracking, $trackingVariants),
  ('', 'font-style', $textStyles, $textStyleVariants),
  ('', 'text-transform', $textTransforms, $textTransformVariants),
  ('', 'text-decoration', $textDecorations, $textDecorationVariants),
  ('', 'font-smoothing', $fontSmoothings, $fontSmoothingVariants),
  ('text', 'text-align', $textAligns, $textAlignVariants),
  ('align', 'vertical-align', $textVerticalAligns, $textVerticalAlignVariants),
  ('whitespace', 'white-space', $whiteSpaces, $whiteSpaceVariants),
  ('break', 'word-wrap', $textBreaks, $textBreakVariants),

  // config/borders.scss
  ('border', $borderWidthProperties, $borderWidths, $borderWidthVariants),
  ('border', 'border-color', $borderColors, $borderColorVariants),
  ('border', 'border-style', $borderStyles, $borderStyleVariants),
  ('rounded', $borderRadiusProperties, $borderRadius, $borderRadiusVariants),

  // config/sizes.scss
  ('w', 'width', $widths, $widthVariants),
  ('min-w', 'min-width', $minWidths, $minWidthVariants),
  ('max-w', 'max-width', $maxWidths, $maxWidthVariants),
  ('h', 'height', $heights, $heightVariants),
  ('min-h', 'min-height', $minHeights, $minHeightVariants),
  ('max-h', 'max-height', $maxHeights, $maxHeightVariants),

  // config/spacing.scss
  ('p', $paddingProperties, $paddings, $paddingVariants),
  ('m', $marginProperties, $margins, $marginVariants),
  ('-m', $negativeMarginProperties, $negativeMargins, $negativeMarginVariants),

  // config/shadows.scss
  ('shadow', 'box-shadow', $shadows, $shadowVariants),

  // config/display.scss
  ('', 'display', $displays, $displayVariants),
  ('flex', 'flex-direction', $flexDirections, $flexDirectionVariants),
  ('flex', 'flex-wrap', $flexWraps, $flexWrapVariants),
  ('items', 'align-items', $flexAlignItems, $flexAlignItemsVariants),
  ('self', 'align-self', $flexAlignSelfs, $flexAlignSelfVariants),
  ('justify', 'justify-content', $flexJustifyContents, $flexJustifyContentVariants),
  ('content', 'align-content', $flexAlignContents, $flexAlignContentVariants),
  ('flex', 'flex', $flexSizes, $flexSizeVariants),
  ('flex', 'flex-grow', $flexGrows, $flexGrowVariants),
  ('flex', 'flex-shrink', $flexShrinks, $flexShrinkVariants),
  ('', 'visibility', $visibilities, $visibilityVariants),

  // config/misc.scss
  ('z', 'z-index', $zIndexes, $zIndexVariants),
  ('opacity', 'opacity', $opacities, $opacityVariants),
  ('fill', 'fill', $svgFills, $svgFillVariants),
  ('stroke', 'stroke', $svgStrokes, $svgStrokeVariants),


  // config/overflow.scss
  ('overflow', $overflowProperties, $overflows, $overflowVariants),
  ('scrolling', '-webkit-overflow-scrolling', $scrollings, $scrollingVariants),

  // config/position.scss
  ('', 'position', $positions, $positionVariants),
  ('pin', $pinsProperties, $pins, ()),

  // config/floats.scss
  ('float', 'float', $floats, $floatVariants),

  // config/.scss
  // ('class', '', '', ()),
);


// ========================================================
// Loop through classes defined above and generate them
// See config/_functions.scss for info on the 'make' mixin

@each $class in $classes {
  @include make($class...);
}




// ========================================================
// Sample CSS

.btn {
  @extend %bg-blue, %p-y-2, %p-x-4, %rounded, %text-white, %hover\:bg-blue-darker;
  @include screen(xs) { @extend %block; }
}
